"use strict";var request=require("supertest"),express=require("express"),axios=require("axios"),githubController=require("../controllers/githubController");jest.mock("axios");var app=express();app.use(express.json()),app.get("/search/users",githubController.searchUsers),app.get("/users/:username",githubController.getUserDetails),app.get("/users/:username/repos",githubController.getUserRepos),app.get("/repos/commits",githubController.getRepoCommits),describe("GitHub Controller",function(){afterEach(function(){jest.clearAllMocks()}),it("should return 400 if 'q' query parameter is missing in search",function(){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(request(app).get("/search/users"));case 2:t=e.sent,expect(t.status).toBe(400),expect(t.body.error).toBe("Query parameter 'q' is required.");case 5:case"end":return e.stop()}})}),it("should return a list of users for a valid 'q' query",function(){var t,r;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t={items:[{login:"Aphiwe10"}]},axios.get.mockResolvedValueOnce({data:t}),e.next=4,regeneratorRuntime.awrap(request(app).get("/search/users?q=Aphiwe10"));case 4:r=e.sent,expect(r.status).toBe(200),expect(r.body.items).toHaveLength(1),expect(r.body.items[0].login).toBe("Aphiwe10");case 8:case"end":return e.stop()}})}),it("should return user details for a valid username",function(){var t,r;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t={login:"Aphiwe10",name:"Aphiwe Maqebhula"},axios.get.mockResolvedValueOnce({data:t}),e.next=4,regeneratorRuntime.awrap(request(app).get("/users/Aphiwe10"));case 4:r=e.sent,expect(r.status).toBe(200),expect(r.body.login).toBe("Aphiwe10"),expect(r.body.name).toBe("Aphiwe Maqebhula");case 8:case"end":return e.stop()}})}),it("should return 404 if user not found",function(){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return axios.get.mockRejectedValueOnce({response:{status:404}}),e.next=3,regeneratorRuntime.awrap(request(app).get("/users/nonexistentuser"));case 3:t=e.sent,expect(t.status).toBe(404);case 5:case"end":return e.stop()}})}),it("should return a list of repositories for a user",function(){var t,r;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=[{name:"repo1"},{name:"repo2"}],axios.get.mockResolvedValueOnce({data:t}),e.next=4,regeneratorRuntime.awrap(request(app).get("/users/Aphiwe10/repos"));case 4:r=e.sent,expect(r.status).toBe(200),expect(r.body).toHaveLength(2),expect(r.body[0].name).toBe("repo1");case 8:case"end":return e.stop()}})}),it("should return 400 if 'owner' or 'repo' query parameters are missing",function(){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,regeneratorRuntime.awrap(request(app).get("/repos/commits"));case 2:t=e.sent,expect(t.status).toBe(400),expect(t.body.error).toBe("Owner and repo parameters are required.");case 5:case"end":return e.stop()}})}),it("should return the last 5 commits for a given repo",function(){var t,r;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=[{sha:"123"},{sha:"456"}],axios.get.mockResolvedValueOnce({data:t}),e.next=4,regeneratorRuntime.awrap(request(app).get("/repos/commits?owner=Aphiwe10&repo=my-repo"));case 4:r=e.sent,expect(r.status).toBe(200),expect(r.body).toHaveLength(2),expect(r.body[0].sha).toBe("123");case 8:case"end":return e.stop()}})})});
//# sourceMappingURL=githubController.test.min.js.map
