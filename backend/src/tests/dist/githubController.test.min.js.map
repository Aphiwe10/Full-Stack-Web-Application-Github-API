{"version":3,"sources":["githubController.test.js"],"names":["request","require","express","githubController","jest","mock","app","use","json","get","searchUsers","getUserDetails","getUserRepos","getRepoCommits","describe","clearAllMocks","res","regeneratorRuntime","async","_context","prev","next","awrap","afterEach","sent","toBe","expect","body","error","stop","it","mockUsers","_context2","items","login","axios","mockResolvedValueOnce","data","status","toHaveLength","mockUserDetails","_context3","name","_context4","mockRejectedValueOnce","response","mockRepos","_context5","_context6","mockCommits","_context7","sha"],"mappings":"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","file":"githubController.test.min.js","sourcesContent":["const request = require(\"supertest\");\nconst express = require(\"express\");\nconst axios = require(\"axios\");\nconst githubController = require(\"../controllers/githubController\");\n\njest.mock(\"axios\"); // Mock axios to prevent actual HTTP requests\n\n// Initialize express app for testing\nconst app = express();\napp.use(express.json()); // for parsing application/json\napp.get(\"/search/users\", githubController.searchUsers);\napp.get(\"/users/:username\", githubController.getUserDetails);\napp.get(\"/users/:username/repos\", githubController.getUserRepos);\napp.get(\"/repos/commits\", githubController.getRepoCommits);\n\ndescribe(\"GitHub Controller\", () => {\n  afterEach(() => {\n    jest.clearAllMocks(); // Clear mocks after each test to prevent data leakage\n  });\n\n  it(\"should return 400 if 'q' query parameter is missing in search\", async () => {\n    const res = await request(app).get(\"/search/users\");\n    expect(res.status).toBe(400);\n    expect(res.body.error).toBe(\"Query parameter 'q' is required.\");\n  });\n\n  it(\"should return a list of users for a valid 'q' query\", async () => {\n    const mockUsers = { items: [{ login: \"Aphiwe10\" }] };\n    axios.get.mockResolvedValueOnce({ data: mockUsers });\n\n    const res = await request(app).get(\"/search/users?q=Aphiwe10\");\n    expect(res.status).toBe(200);\n    expect(res.body.items).toHaveLength(1);\n    expect(res.body.items[0].login).toBe(\"Aphiwe10\");\n  });\n\n  it(\"should return user details for a valid username\", async () => {\n    const mockUserDetails = { login: \"Aphiwe10\", name: \"Aphiwe Maqebhula\" };\n    axios.get.mockResolvedValueOnce({ data: mockUserDetails });\n\n    const res = await request(app).get(\"/users/Aphiwe10\");\n    expect(res.status).toBe(200);\n    expect(res.body.login).toBe(\"Aphiwe10\");\n    expect(res.body.name).toBe(\"Aphiwe Maqebhula\");\n  });\n\n  it(\"should return 404 if user not found\", async () => {\n    axios.get.mockRejectedValueOnce({ response: { status: 404 } });\n\n    const res = await request(app).get(\"/users/nonexistentuser\");\n    expect(res.status).toBe(404);\n  });\n\n  it(\"should return a list of repositories for a user\", async () => {\n    const mockRepos = [{ name: \"repo1\" }, { name: \"repo2\" }];\n    axios.get.mockResolvedValueOnce({ data: mockRepos });\n\n    const res = await request(app).get(\"/users/Aphiwe10/repos\");\n    expect(res.status).toBe(200);\n    expect(res.body).toHaveLength(2);\n    expect(res.body[0].name).toBe(\"repo1\");\n  });\n\n  it(\"should return 400 if 'owner' or 'repo' query parameters are missing\", async () => {\n    const res = await request(app).get(\"/repos/commits\");\n    expect(res.status).toBe(400);\n    expect(res.body.error).toBe(\"Owner and repo parameters are required.\");\n  });\n\n  it(\"should return the last 5 commits for a given repo\", async () => {\n    const mockCommits = [{ sha: \"123\" }, { sha: \"456\" }];\n    axios.get.mockResolvedValueOnce({ data: mockCommits });\n\n    const res = await request(app).get(\n      \"/repos/commits?owner=Aphiwe10&repo=my-repo\"\n    );\n    expect(res.status).toBe(200);\n    expect(res.body).toHaveLength(2);\n    expect(res.body[0].sha).toBe(\"123\");\n  });\n});\n"]}