{"version":3,"sources":["githubController.test.js"],"names":["request","require","express","axios","githubController","jest","mock","app","use","json","get","searchUsers","getUserDetails","getUserRepos","getRepoCommits","describe","afterEach","clearAllMocks","it","res","expect","status","toBe","body","error","mockUsers","items","login","mockResolvedValueOnce","data","toHaveLength","mockUserDetails","name","mockRejectedValueOnce","response","mockRepos","mockCommits","sha"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMG,gBAAgB,GAAGH,OAAO,CAAC,iCAAD,CAAhC;;AAEAI,IAAI,CAACC,IAAL,CAAU,OAAV,E,CAAoB;AAEpB;;AACA,IAAMC,GAAG,GAAGL,OAAO,EAAnB;AACAK,GAAG,CAACC,GAAJ,CAAQN,OAAO,CAACO,IAAR,EAAR,E,CAAyB;;AACzBF,GAAG,CAACG,GAAJ,CAAQ,eAAR,EAAyBN,gBAAgB,CAACO,WAA1C;AACAJ,GAAG,CAACG,GAAJ,CAAQ,kBAAR,EAA4BN,gBAAgB,CAACQ,cAA7C;AACAL,GAAG,CAACG,GAAJ,CAAQ,wBAAR,EAAkCN,gBAAgB,CAACS,YAAnD;AACAN,GAAG,CAACG,GAAJ,CAAQ,gBAAR,EAA0BN,gBAAgB,CAACU,cAA3C;AAEAC,QAAQ,CAAC,mBAAD,EAAsB,YAAM;AAClCC,EAAAA,SAAS,CAAC,YAAM;AACdX,IAAAA,IAAI,CAACY,aAAL,GADc,CACQ;AACvB,GAFQ,CAAT;AAIAC,EAAAA,EAAE,CAAC,+DAAD,EAAkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAChDlB,OAAO,CAACO,GAAD,CAAP,CAAaG,GAAb,CAAiB,eAAjB,CADgD;;AAAA;AAC5DS,YAAAA,GAD4D;AAElEC,YAAAA,MAAM,CAACD,GAAG,CAACE,MAAL,CAAN,CAAmBC,IAAnB,CAAwB,GAAxB;AACAF,YAAAA,MAAM,CAACD,GAAG,CAACI,IAAJ,CAASC,KAAV,CAAN,CAAuBF,IAAvB,CAA4B,kCAA5B;;AAHkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlE,CAAF;AAMAJ,EAAAA,EAAE,CAAC,qDAAD,EAAwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAClDO,YAAAA,SADkD,GACtC;AAAEC,cAAAA,KAAK,EAAE,CAAC;AAAEC,gBAAAA,KAAK,EAAE;AAAT,eAAD;AAAT,aADsC;AAExDxB,YAAAA,KAAK,CAACO,GAAN,CAAUkB,qBAAV,CAAgC;AAAEC,cAAAA,IAAI,EAAEJ;AAAR,aAAhC;AAFwD;AAAA,4CAItCzB,OAAO,CAACO,GAAD,CAAP,CAAaG,GAAb,CAAiB,0BAAjB,CAJsC;;AAAA;AAIlDS,YAAAA,GAJkD;AAKxDC,YAAAA,MAAM,CAACD,GAAG,CAACE,MAAL,CAAN,CAAmBC,IAAnB,CAAwB,GAAxB;AACAF,YAAAA,MAAM,CAACD,GAAG,CAACI,IAAJ,CAASG,KAAV,CAAN,CAAuBI,YAAvB,CAAoC,CAApC;AACAV,YAAAA,MAAM,CAACD,GAAG,CAACI,IAAJ,CAASG,KAAT,CAAe,CAAf,EAAkBC,KAAnB,CAAN,CAAgCL,IAAhC,CAAqC,UAArC;;AAPwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxD,CAAF;AAUAJ,EAAAA,EAAE,CAAC,iDAAD,EAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9Ca,YAAAA,eAD8C,GAC5B;AAAEJ,cAAAA,KAAK,EAAE,UAAT;AAAqBK,cAAAA,IAAI,EAAE;AAA3B,aAD4B;AAEpD7B,YAAAA,KAAK,CAACO,GAAN,CAAUkB,qBAAV,CAAgC;AAAEC,cAAAA,IAAI,EAAEE;AAAR,aAAhC;AAFoD;AAAA,4CAIlC/B,OAAO,CAACO,GAAD,CAAP,CAAaG,GAAb,CAAiB,iBAAjB,CAJkC;;AAAA;AAI9CS,YAAAA,GAJ8C;AAKpDC,YAAAA,MAAM,CAACD,GAAG,CAACE,MAAL,CAAN,CAAmBC,IAAnB,CAAwB,GAAxB;AACAF,YAAAA,MAAM,CAACD,GAAG,CAACI,IAAJ,CAASI,KAAV,CAAN,CAAuBL,IAAvB,CAA4B,UAA5B;AACAF,YAAAA,MAAM,CAACD,GAAG,CAACI,IAAJ,CAASS,IAAV,CAAN,CAAsBV,IAAtB,CAA2B,kBAA3B;;AAPoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApD,CAAF;AAUAJ,EAAAA,EAAE,CAAC,qCAAD,EAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AACxCf,YAAAA,KAAK,CAACO,GAAN,CAAUuB,qBAAV,CAAgC;AAAEC,cAAAA,QAAQ,EAAE;AAAEb,gBAAAA,MAAM,EAAE;AAAV;AAAZ,aAAhC;AADwC;AAAA,4CAGtBrB,OAAO,CAACO,GAAD,CAAP,CAAaG,GAAb,CAAiB,wBAAjB,CAHsB;;AAAA;AAGlCS,YAAAA,GAHkC;AAIxCC,YAAAA,MAAM,CAACD,GAAG,CAACE,MAAL,CAAN,CAAmBC,IAAnB,CAAwB,GAAxB;;AAJwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxC,CAAF;AAOAJ,EAAAA,EAAE,CAAC,iDAAD,EAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9CiB,YAAAA,SAD8C,GAClC,CAAC;AAAEH,cAAAA,IAAI,EAAE;AAAR,aAAD,EAAoB;AAAEA,cAAAA,IAAI,EAAE;AAAR,aAApB,CADkC;AAEpD7B,YAAAA,KAAK,CAACO,GAAN,CAAUkB,qBAAV,CAAgC;AAAEC,cAAAA,IAAI,EAAEM;AAAR,aAAhC;AAFoD;AAAA,4CAIlCnC,OAAO,CAACO,GAAD,CAAP,CAAaG,GAAb,CAAiB,uBAAjB,CAJkC;;AAAA;AAI9CS,YAAAA,GAJ8C;AAKpDC,YAAAA,MAAM,CAACD,GAAG,CAACE,MAAL,CAAN,CAAmBC,IAAnB,CAAwB,GAAxB;AACAF,YAAAA,MAAM,CAACD,GAAG,CAACI,IAAL,CAAN,CAAiBO,YAAjB,CAA8B,CAA9B;AACAV,YAAAA,MAAM,CAACD,GAAG,CAACI,IAAJ,CAAS,CAAT,EAAYS,IAAb,CAAN,CAAyBV,IAAzB,CAA8B,OAA9B;;AAPoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApD,CAAF;AAUAJ,EAAAA,EAAE,CAAC,qEAAD,EAAwE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CACtDlB,OAAO,CAACO,GAAD,CAAP,CAAaG,GAAb,CAAiB,gBAAjB,CADsD;;AAAA;AAClES,YAAAA,GADkE;AAExEC,YAAAA,MAAM,CAACD,GAAG,CAACE,MAAL,CAAN,CAAmBC,IAAnB,CAAwB,GAAxB;AACAF,YAAAA,MAAM,CAACD,GAAG,CAACI,IAAJ,CAASC,KAAV,CAAN,CAAuBF,IAAvB,CAA4B,yCAA5B;;AAHwE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxE,CAAF;AAMAJ,EAAAA,EAAE,CAAC,mDAAD,EAAsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAChDkB,YAAAA,WADgD,GAClC,CAAC;AAAEC,cAAAA,GAAG,EAAE;AAAP,aAAD,EAAiB;AAAEA,cAAAA,GAAG,EAAE;AAAP,aAAjB,CADkC;AAEtDlC,YAAAA,KAAK,CAACO,GAAN,CAAUkB,qBAAV,CAAgC;AAAEC,cAAAA,IAAI,EAAEO;AAAR,aAAhC;AAFsD;AAAA,4CAIpCpC,OAAO,CAACO,GAAD,CAAP,CAAaG,GAAb,CAChB,4CADgB,CAJoC;;AAAA;AAIhDS,YAAAA,GAJgD;AAOtDC,YAAAA,MAAM,CAACD,GAAG,CAACE,MAAL,CAAN,CAAmBC,IAAnB,CAAwB,GAAxB;AACAF,YAAAA,MAAM,CAACD,GAAG,CAACI,IAAL,CAAN,CAAiBO,YAAjB,CAA8B,CAA9B;AACAV,YAAAA,MAAM,CAACD,GAAG,CAACI,IAAJ,CAAS,CAAT,EAAYc,GAAb,CAAN,CAAwBf,IAAxB,CAA6B,KAA7B;;AATsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtD,CAAF;AAWD,CAjEO,CAAR","sourcesContent":["const request = require(\"supertest\");\nconst express = require(\"express\");\nconst axios = require(\"axios\");\nconst githubController = require(\"../controllers/githubController\");\n\njest.mock(\"axios\"); // Mock axios to prevent actual HTTP requests\n\n// Initialize express app for testing\nconst app = express();\napp.use(express.json()); // for parsing application/json\napp.get(\"/search/users\", githubController.searchUsers);\napp.get(\"/users/:username\", githubController.getUserDetails);\napp.get(\"/users/:username/repos\", githubController.getUserRepos);\napp.get(\"/repos/commits\", githubController.getRepoCommits);\n\ndescribe(\"GitHub Controller\", () => {\n  afterEach(() => {\n    jest.clearAllMocks(); // Clear mocks after each test to prevent data leakage\n  });\n\n  it(\"should return 400 if 'q' query parameter is missing in search\", async () => {\n    const res = await request(app).get(\"/search/users\");\n    expect(res.status).toBe(400);\n    expect(res.body.error).toBe(\"Query parameter 'q' is required.\");\n  });\n\n  it(\"should return a list of users for a valid 'q' query\", async () => {\n    const mockUsers = { items: [{ login: \"Aphiwe10\" }] };\n    axios.get.mockResolvedValueOnce({ data: mockUsers });\n\n    const res = await request(app).get(\"/search/users?q=Aphiwe10\");\n    expect(res.status).toBe(200);\n    expect(res.body.items).toHaveLength(1);\n    expect(res.body.items[0].login).toBe(\"Aphiwe10\");\n  });\n\n  it(\"should return user details for a valid username\", async () => {\n    const mockUserDetails = { login: \"Aphiwe10\", name: \"Aphiwe Maqebhula\" };\n    axios.get.mockResolvedValueOnce({ data: mockUserDetails });\n\n    const res = await request(app).get(\"/users/Aphiwe10\");\n    expect(res.status).toBe(200);\n    expect(res.body.login).toBe(\"Aphiwe10\");\n    expect(res.body.name).toBe(\"Aphiwe Maqebhula\");\n  });\n\n  it(\"should return 404 if user not found\", async () => {\n    axios.get.mockRejectedValueOnce({ response: { status: 404 } });\n\n    const res = await request(app).get(\"/users/nonexistentuser\");\n    expect(res.status).toBe(404);\n  });\n\n  it(\"should return a list of repositories for a user\", async () => {\n    const mockRepos = [{ name: \"repo1\" }, { name: \"repo2\" }];\n    axios.get.mockResolvedValueOnce({ data: mockRepos });\n\n    const res = await request(app).get(\"/users/Aphiwe10/repos\");\n    expect(res.status).toBe(200);\n    expect(res.body).toHaveLength(2);\n    expect(res.body[0].name).toBe(\"repo1\");\n  });\n\n  it(\"should return 400 if 'owner' or 'repo' query parameters are missing\", async () => {\n    const res = await request(app).get(\"/repos/commits\");\n    expect(res.status).toBe(400);\n    expect(res.body.error).toBe(\"Owner and repo parameters are required.\");\n  });\n\n  it(\"should return the last 5 commits for a given repo\", async () => {\n    const mockCommits = [{ sha: \"123\" }, { sha: \"456\" }];\n    axios.get.mockResolvedValueOnce({ data: mockCommits });\n\n    const res = await request(app).get(\n      \"/repos/commits?owner=Aphiwe10&repo=my-repo\"\n    );\n    expect(res.status).toBe(200);\n    expect(res.body).toHaveLength(2);\n    expect(res.body[0].sha).toBe(\"123\");\n  });\n});\n"],"file":"githubController.test.dev.js"}