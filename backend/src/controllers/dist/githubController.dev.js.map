{"version":3,"sources":["githubController.js"],"names":["axios","require","GITHUB_API_BASE_URL","searchUsers","req","res","next","q","query","status","json","error","get","headers","Authorization","process","env","GITHUB_TOKEN","params","response","data","getUserDetails","username","getUserRepos","sort","per_page","getRepoCommits","owner","repo","module","exports"],"mappings":"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","sourcesContent":["const axios = require(\"axios\");\n\n// Configure GitHub API base URL\nconst GITHUB_API_BASE_URL = \"https://api.github.com\";\n\n// Fetch GitHub users by username\nconst searchUsers = async (req, res, next) => {\n  const { q } = req.query; // Query parameter for search\n  try {\n    if (!q) {\n      return res\n        .status(400)\n        .json({ error: \"Query parameter 'q' is required.\" });\n    }\n\n    const response = await axios.get(`${GITHUB_API_BASE_URL}/search/users`, {\n      headers: { Authorization: `Bearer ${process.env.GITHUB_TOKEN}` },\n      params: { q },\n    });\n    res.status(200).json(response.data);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// Fetch GitHub user details\nconst getUserDetails = async (req, res, next) => {\n  const { username } = req.params; // Username from route parameter\n  try {\n    const response = await axios.get(\n      `${GITHUB_API_BASE_URL}/users/${username}`,\n      {\n        headers: { Authorization: `Bearer ${process.env.GITHUB_TOKEN}` },\n      }\n    );\n    res.status(200).json(response.data); // Return user data if found\n  } catch (error) {\n    if (error.response && error.response.status === 404) {\n      // Handle user not found (404)\n      return res.status(404).json({ error: \"User not found\" });\n    }\n    // For other errors, pass them to the next middleware\n    next(error);\n  }\n};\n\n// Fetch user's repositories\nconst getUserRepos = async (req, res, next) => {\n  const { username } = req.params; // Username from route parameter\n  try {\n    const response = await axios.get(\n      `${GITHUB_API_BASE_URL}/users/${username}/repos`,\n      {\n        headers: { Authorization: `Bearer ${process.env.GITHUB_TOKEN}` },\n        params: { sort: \"updated\", per_page: 50 }, // Fetch up to 50 repos sorted by last update\n      }\n    );\n    res.status(200).json(response.data);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// Fetch last 5 commits for a given repository\nconst getRepoCommits = async (req, res, next) => {\n  const { owner, repo } = req.query; // Owner and repo from query params\n  if (!owner || !repo) {\n    return res\n      .status(400)\n      .json({ error: \"Owner and repo parameters are required.\" });\n  }\n\n  try {\n    const response = await axios.get(\n      `${GITHUB_API_BASE_URL}/repos/${owner}/${repo}/commits`,\n      {\n        headers: { Authorization: `Bearer ${process.env.GITHUB_TOKEN}` },\n        params: { per_page: 5 }, // Limit to 5 commits\n      }\n    );\n    res.status(200).json(response.data);\n  } catch (error) {\n    next(error);\n  }\n};\n\nmodule.exports = {\n  searchUsers,\n  getUserDetails,\n  getUserRepos,\n  getRepoCommits,\n};\n"],"file":"githubController.dev.js"}