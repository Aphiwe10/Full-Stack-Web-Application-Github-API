{"version":3,"sources":["githubController.js"],"names":["axios","require","GITHUB_API_BASE_URL","searchUsers","req","res","next","q","response","regeneratorRuntime","async","_context","prev","query","abrupt","status","json","error","awrap","get","concat","headers","Authorization","process","env","GITHUB_TOKEN","params","sent","data","t0","stop","getUserDetails","username","_context2","getUserRepos","_context3","sort","per_page","getRepoCommits","_req$query","owner","repo","_context4","module","exports"],"mappings":"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","file":"githubController.min.js","sourcesContent":["const axios = require(\"axios\");\n\n// Configure GitHub API base URL\nconst GITHUB_API_BASE_URL = \"https://api.github.com\";\n\n// Fetch GitHub users by username\nconst searchUsers = async (req, res, next) => {\n  const { q } = req.query; // Query parameter for search\n  try {\n    if (!q) {\n      return res\n        .status(400)\n        .json({ error: \"Query parameter 'q' is required.\" });\n    }\n\n    const response = await axios.get(`${GITHUB_API_BASE_URL}/search/users`, {\n      headers: { Authorization: `Bearer ${process.env.GITHUB_TOKEN}` },\n      params: { q },\n    });\n    res.status(200).json(response.data);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// Fetch GitHub user details\nconst getUserDetails = async (req, res, next) => {\n  const { username } = req.params; // Username from route parameter\n  try {\n    const response = await axios.get(\n      `${GITHUB_API_BASE_URL}/users/${username}`,\n      {\n        headers: { Authorization: `Bearer ${process.env.GITHUB_TOKEN}` },\n      }\n    );\n    res.status(200).json(response.data); // Return user data if found\n  } catch (error) {\n    if (error.response && error.response.status === 404) {\n      // Handle user not found (404)\n      return res.status(404).json({ error: \"User not found\" });\n    }\n    // For other errors, pass them to the next middleware\n    next(error);\n  }\n};\n\n// Fetch user's repositories\nconst getUserRepos = async (req, res, next) => {\n  const { username } = req.params; // Username from route parameter\n  try {\n    const response = await axios.get(\n      `${GITHUB_API_BASE_URL}/users/${username}/repos`,\n      {\n        headers: { Authorization: `Bearer ${process.env.GITHUB_TOKEN}` },\n        params: { sort: \"updated\", per_page: 50 }, // Fetch up to 50 repos sorted by last update\n      }\n    );\n    res.status(200).json(response.data);\n  } catch (error) {\n    next(error);\n  }\n};\n\n// Fetch last 5 commits for a given repository\nconst getRepoCommits = async (req, res, next) => {\n  const { owner, repo } = req.query; // Owner and repo from query params\n  if (!owner || !repo) {\n    return res\n      .status(400)\n      .json({ error: \"Owner and repo parameters are required.\" });\n  }\n\n  try {\n    const response = await axios.get(\n      `${GITHUB_API_BASE_URL}/repos/${owner}/${repo}/commits`,\n      {\n        headers: { Authorization: `Bearer ${process.env.GITHUB_TOKEN}` },\n        params: { per_page: 5 }, // Limit to 5 commits\n      }\n    );\n    res.status(200).json(response.data);\n  } catch (error) {\n    next(error);\n  }\n};\n\nmodule.exports = {\n  searchUsers,\n  getUserDetails,\n  getUserRepos,\n  getRepoCommits,\n};\n"]}